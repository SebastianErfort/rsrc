#!/bin/bash
# create ssh certificate
set -eau
die () { local rc="$?"; echo "$@"; exit "$rc"; }
shm () {
    local d=/tmp/
    case "$(uname -s)" in
        Linux) [ -e /dev/shm ] && d=/dev/shm/ ;;
        Darwin)
            [ -e "/Volumes/shm_${USER}" ] && echo "/Volumes/shm_${USER}" && return
            local size_in_mb=50
            local dev=$(hdiutil attach -nomount ram://$((2 * 1024 * $size_in_mb)))
            diskutil quiet eraseVolume HFS+ "shm_$USER" $dev
            d=/Volumes/shm_;;
    esac
    [ -e "${d}${USER}" ] || mkdir "${d}${USER}"
    echo "${d}${USER}"
}

generate_ssh_certificates () {
    local user="$1" source="$2" validity_interval="$3"
    local shm="$(shm)"
    local CA="${shm}"/temp-CA
    local key="${shm}"/key

    [ -e "${CA:=ca}" ] && rm "${CA:=ca}"
    [ -e "${key:=key}" ] && rm "${key:=key}"
    ssh-keygen -q -t ed25519 -N '' -C 'temporary CA'  -f "${CA:=ca}"
    ssh-keygen -q -t ed25519 -N '' -C 'ephemeral key' -f "${key:=key}"
    set -x
    ssh-keygen -q -s $CA -Iremco.wouts@rug.nl\
               -n ${user:=$USER}\
               -V ${validity_interval:=+10h}\
               -O clear\
               -O source-address="$source"\
               ${ARGS[*]:-} "${key}.pub"
    set +x
    ssh-keygen -L -f ${key}-cert.pub
    zip -j "${shm}/key.zip" ${key} ${key}-cert.pub
    rm "$CA" "$key" "${key}.pub" ${key}-cert.pub
    echo -n "cert-authority " && cat "${CA}.pub"
}

ARGS=()
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|-\?|--help)
            cat <<EOF && exit
Usage: ssh-cert -u <user> -h <hostname> 

Will create a set of ssh certificates that allows the given user acount
access from the given host for the next 10h.
Options:
-u|--user name: account that will be used 
-host|--host hostname: hostname to connect from (optional)
-s|--source source: source ip address (range) that will make the connection
       (alternative for --host) (optional, 129.125.249.87/32,129.125.21.0/24))
-V|--validity(interval): specify validity (optional, +10h)

See ssh-keygen, sshd_config for details.

To use the ssh key+certificate add the ''cert-authority'' line to your
~/.ssh/authorized_keys of the account you want to have access to.
Copy and unzip the key.zip file in the account you want to have access from and use
''ssh -i <path to key> -oIdentiesOnly=yes -oControlPath=none ....''

EOF
            ;;
        -u|--user)
            user="$2"; shift 2 ;;
        -host|--host*)
            ip="$(host ""$2"" | awk '/address/{print $NF;exit}')"
            shift 2 ;;
        -s|--source)
            ip="$2"; shift 2 ;;
        -V|--valid*)
            validity="$2"; shift 2 ;;
        --*=*)
            s=${1%=*}; printf -v t '%q' "${1#*=}"; shift; set -- $s "$t" "$@" ;;
        *) # save unhandled positional argument
            echo "$1"
            ARGS+=("$(printf '%q' "$1")") ; shift
            echo "${ARGS[@]}"
            ;;
    esac
done
exit
set -- "${ARGS[@]:-}" # restore positional parameters
generate_ssh_certificates "${user:=rwouts}" ${ip:=129.125.249.87/32,129.125.21.0/24} ${validity:=+10h}
